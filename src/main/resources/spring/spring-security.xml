<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">
    <!--开启权限注解，JSR-250注解、@Secured注解和支持表达式的注解-->
    <security:global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled" secured-annotations="enabled"/>

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/images/**" security="none"/>
    <security:http pattern="/fonts/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/article/*" security="none"/>
    <security:http pattern="/" security="none"/>
    <security:http pattern="/index" security="none"/>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="false">
        <!--设置该页面可以在相同域名页面的 frame 中展示-->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN" />
        </security:headers>

        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
        <security:intercept-url pattern="/admin/**" access="ROLE_USER,ROLE_ADMIN,ROLE_ROOT"/>

        <!-- 定义跳转的具体的页面 -->
        <!--form-login是spring security命名空间配置登录相关信息的标签,它包含如下属性：
            1. login-page 自定义登录页url,默认为/login
            2. login-processing-url 登录请求拦截的url,也就是form表单提交时指定的action
            3. default-target-url 默认登录成功后跳转的url
            4. always-use-default-target 是否总是使用默认的登录成功后跳转url
            5. authentication-failure-url 登录失败后跳转的url
            6. username-parameter 用户名的请求字段 默认为userName
            7. password-parameter 密码的请求字段 默认为password
            8. authentication-success-handler-ref 指向一个AuthenticationSuccessHandler用于处理认证成功的请求,不能和default-target-url还有always-use-default-target同时使用
            9. authentication-success-forward-url 用于authentication-failure-handler-ref
            10. authentication-failure-handler-ref 指向一个AuthenticationFailureHandler用于处理失败的认证请求
            11. authentication-failure-forward-url 用于authentication-failure-handler-ref
            12. authentication-details-source-ref 指向一个AuthenticationDetailsSource,在认证过滤器中使用
            -->
        <security:form-login
                login-page="/login"
                login-processing-url="/admin/login"
                authentication-failure-url="/login?error=true"
                authentication-success-forward-url="/admin"
        />
        <!--关键点：remember-me配置后，启用RememberMeAuthenticationFilter过滤功能；
        首次登陆时，如果remember-me标记传入，则会将认证成功的信息(用户名、有效期、密码、安全框架提供的key)加密后回写到cookie；
        下次登陆时，请求中会将cookie带过去RememberMeAuthenticationFilter将其解析后，得到其中的用户名，
        查询用户信息后，再次将查询到的用户信息加密，将加密后的字符串对比cookie中的字符串
        如果一致，设置认证成功；如果不一致，认证失败，抛出异常-->
        <security:remember-me remember-me-parameter="remember-me" key="authorition" user-service-ref="userService"/>

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login" />

        <!--会话管理-->
        <!--其中invalid-session-url是配置会话失效转向地址；
        max-sessions是设置单个用户最大并行会话数；
        error-if-maximum-exceeded是配置当用户登录数达到最大时是否报错，
        设置为true时会报错且后登录的会话不能登录，默认为false不报错且将前一会话置为失效。-->
        <security:session-management invalid-session-url="/login">
            <!-- 并行控制 1个用户在线后其他的设备登录此用户失败 -->
            <!--<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>-->
        </security:session-management>

    </security:http>


    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式 登录时-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="userService" class="ssm.service.impl.UserServiceImpl"/>


    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>mymessages</value>
            </list>
        </property>
    </bean>

    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

   <!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="classpath:org/springframework/security/messages_zh_CN"></property>
    </bean>-->

    <!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
    -->

</beans>